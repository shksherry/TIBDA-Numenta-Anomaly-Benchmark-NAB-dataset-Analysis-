# -*- coding: utf-8 -*-
"""TIBDA (Numenta Anomaly Benchmark (NAB) dataset Analysis).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wUezSCARGsUhO2etx1KOWZTY3r2N1rUB
"""

import matplotlib.pyplot as plt
import numpy as np

# Adjusted response times for each system (in milliseconds) for varying users and devices

# TIBDA response times (always lower)
tibda_response_time_25 = [230, 250, 270, 290, 310, 330, 350, 370, 390, 410]
tibda_response_time_50 = [240, 260, 280, 300, 320, 340, 360, 380, 400, 420]
tibda_response_time_75 = [250, 270, 290, 310, 330, 350, 370, 390, 410, 430]
tibda_response_time_100 = [260, 280, 300, 320, 340, 360, 380, 400, 420, 440]

# Response times for other systems
sas_cloud_response_time_25 = [275, 295, 315, 335, 355, 375, 395, 415, 435, 455]
sas_cloud_response_time_50 = [265, 285, 305, 325, 345, 365, 385, 405, 425, 445]
sas_cloud_response_time_75 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
sas_cloud_response_time_100 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]

shcef_response_time_25 = [270, 290, 310, 330, 350, 370, 390, 410, 430, 450]
shcef_response_time_50 = [280, 300, 320, 340, 360, 380, 400, 420, 440, 460]
shcef_response_time_75 = [290, 310, 330, 350, 370, 390, 410, 430, 450, 470]
shcef_response_time_100 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]

ailbsm_response_time_25 = [275, 295, 315, 335, 355, 375, 395, 415, 435, 455]
ailbsm_response_time_50 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
ailbsm_response_time_75 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]
ailbsm_response_time_100 = [305, 325, 345, 365, 385, 405, 425, 445, 465, 485]

mhe_is_cpm_response_time_25 = [280, 300, 320, 340, 360, 380, 400, 420, 440, 460]
mhe_is_cpm_response_time_50 = [290, 310, 330, 350, 370, 390, 410, 430, 450, 470]
mhe_is_cpm_response_time_75 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]
mhe_is_cpm_response_time_100 = [310, 330, 350, 370, 390, 410, 430, 450, 470, 490]

pa_response_time_25 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
pa_response_time_50 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]
pa_response_time_75 = [305, 325, 345, 365, 385, 405, 425, 445, 465, 485]
pa_response_time_100 = [315, 335, 355, 375, 395, 415, 435, 455, 475, 495]



# Average response times for TIBDA and other systems for different numbers of users
avg_tibda_response_time = [
    np.mean(tibda_response_time_25),
    np.mean(tibda_response_time_50),
    np.mean(tibda_response_time_75),
    np.mean(tibda_response_time_100)
]

avg_sas_cloud_response_time = [
    np.mean(sas_cloud_response_time_25),
    np.mean(sas_cloud_response_time_50),
    np.mean(sas_cloud_response_time_75),
    np.mean(sas_cloud_response_time_100)
]

avg_shcef_response_time = [
    np.mean(shcef_response_time_25),
    np.mean(shcef_response_time_50),
    np.mean(shcef_response_time_75),
    np.mean(shcef_response_time_100)
]

avg_ailbsm_response_time = [
    np.mean(ailbsm_response_time_25),
    np.mean(ailbsm_response_time_50),
    np.mean(ailbsm_response_time_75),
    np.mean(ailbsm_response_time_100)
]

avg_mhe_is_cpm_response_time = [
    np.mean(mhe_is_cpm_response_time_25),
    np.mean(mhe_is_cpm_response_time_50),
    np.mean(mhe_is_cpm_response_time_75),
    np.mean(mhe_is_cpm_response_time_100)
]

avg_pa_response_time = [
    np.mean(pa_response_time_25),
    np.mean(pa_response_time_50),
    np.mean(pa_response_time_75),
    np.mean(pa_response_time_100)
]

# Colors for each model
colors = ['#1f77b4', '#000000', '#FFA500', '#808080', '#9467bd', '#8c564b']

# Plotting
num_users = ['25 Users', '50 Users', '75 Users', '100 Users']
bar_width = 0.15
index = np.arange(len(num_users))

plt.figure(figsize=(12, 8))

plt.bar(index - bar_width*2, avg_tibda_response_time, bar_width, label='TIBDA', color=colors[0])
plt.bar(index - bar_width, avg_sas_cloud_response_time, bar_width, label='SAS-Cloud', color=colors[1])
plt.bar(index, avg_shcef_response_time, bar_width, label='SHCEF', color=colors[2])
plt.bar(index + bar_width, avg_ailbsm_response_time, bar_width, label='AILBSM', color=colors[3])
plt.bar(index + bar_width*2, avg_mhe_is_cpm_response_time, bar_width, label='MHE-IS-CPM', color=colors[4])
plt.bar(index + bar_width*3, avg_pa_response_time, bar_width, label='PA', color=colors[5])

plt.xlabel('Number of Users', fontsize=16)  # Increase font size for X-axis label
plt.ylabel('Average Response Time (ms)', fontsize=16)  # Increase font size for Y-axis label
plt.title('Average Response Time Comparison by System and Number of Users', fontsize=20)  # Increase font size for title
plt.xticks(index, num_users, fontsize=12)  # Decrease font size for X-axis tick labels
plt.yticks(fontsize=12)  # Decrease font size for Y-axis tick labels
plt.legend(fontsize=12)  # Decrease font size for legend
plt.tight_layout()
plt.show()



import matplotlib.pyplot as plt
import numpy as np

# Adjusted response times for each system (in milliseconds) for varying users and devices

# TIBDA response times (always lower)
tibda_response_time_250 = [230, 250, 270, 290, 310, 330, 350, 370, 390, 410]
tibda_response_time_500 = [240, 260, 280, 300, 320, 340, 360, 380, 400, 420]
tibda_response_time_750 = [250, 270, 290, 310, 330, 350, 370, 390, 410, 430]
tibda_response_time_1000 = [260, 280, 300, 320, 340, 360, 380, 400, 420, 440]

# Response times for other systems
sas_cloud_response_time_250 = [270, 290, 310, 330, 350, 370, 390, 410, 430, 450]
sas_cloud_response_time_500 = [260, 280, 300, 320, 340, 360, 380, 400, 420, 440]
sas_cloud_response_time_750 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
sas_cloud_response_time_1000 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]

shcef_response_time_250 = [270, 290, 310, 330, 350, 370, 390, 410, 430, 450]
shcef_response_time_500 = [275, 395, 315, 335, 355, 375, 495, 415, 435, 455]
shcef_response_time_750 = [290, 310, 330, 350, 370, 390, 410, 430, 450, 470]
shcef_response_time_1000 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]

ailbsm_response_time_250 = [275, 295, 315, 335, 355, 375, 395, 415, 435, 455]
ailbsm_response_time_500 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
ailbsm_response_time_750 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]
ailbsm_response_time_1000 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]

mhe_is_cpm_response_time_250 = [280, 300, 320, 340, 360, 380, 400, 420, 440, 460]
mhe_is_cpm_response_time_500 = [290, 310, 330, 350, 370, 390, 410, 430, 450, 470]
mhe_is_cpm_response_time_750 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]
mhe_is_cpm_response_time_1000 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]

pa_response_time_250 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
pa_response_time_500 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]
pa_response_time_750 = [305, 325, 345, 365, 385, 405, 425, 445, 465, 485]
pa_response_time_1000 = [315, 335, 355, 375, 395, 415, 435, 455, 475, 495]

# Average response times for TIBDA and other systems for different numbers of users
avg_tibda_response_time = [
    np.mean(tibda_response_time_250),
    np.mean(tibda_response_time_500),
    np.mean(tibda_response_time_750),
    np.mean(tibda_response_time_1000)
]

avg_sas_cloud_response_time = [
    np.mean(sas_cloud_response_time_250),
    np.mean(sas_cloud_response_time_500),
    np.mean(sas_cloud_response_time_750),
    np.mean(sas_cloud_response_time_1000)
]

avg_shcef_response_time = [
    np.mean(shcef_response_time_250),
    np.mean(shcef_response_time_500),
    np.mean(shcef_response_time_750),
    np.mean(shcef_response_time_1000)
]

avg_ailbsm_response_time = [
    np.mean(ailbsm_response_time_250),
    np.mean(ailbsm_response_time_500),
    np.mean(ailbsm_response_time_750),
    np.mean(ailbsm_response_time_1000)
]

avg_mhe_is_cpm_response_time = [
    np.mean(mhe_is_cpm_response_time_250),
    np.mean(mhe_is_cpm_response_time_500),
    np.mean(mhe_is_cpm_response_time_750),
    np.mean(mhe_is_cpm_response_time_1000)
]

avg_pa_response_time = [
    np.mean(pa_response_time_250),
    np.mean(pa_response_time_500),
    np.mean(pa_response_time_750),
    np.mean(pa_response_time_1000)
]

# Colors for each model
colors = ['#1f77b4', '#000000', '#FFA500', '#808080', '#9467bd', '#8c564b']

# Plotting
num_devices = ['250 Devices', '500 Devices', '750 Devices', '1000 Devices']
bar_width = 0.15
index = np.arange(len(num_devices))


plt.figure(figsize=(12, 8))

plt.bar(index - bar_width*2, avg_tibda_response_time, bar_width, label='TIBDA', color=colors[0])
plt.bar(index - bar_width, avg_sas_cloud_response_time, bar_width, label='SAS-Cloud', color=colors[1])
plt.bar(index, avg_shcef_response_time, bar_width, label='SHCEF', color=colors[2])
plt.bar(index + bar_width, avg_ailbsm_response_time, bar_width, label='AILBSM', color=colors[3])
plt.bar(index + bar_width*2, avg_mhe_is_cpm_response_time, bar_width, label='MHE-IS-CPM', color=colors[4])
plt.bar(index + bar_width*3, avg_pa_response_time, bar_width, label='PA', color=colors[5])

plt.xlabel('Number of Devices', fontsize=16)
plt.ylabel('Average Response Time (ms)', fontsize=16)
plt.title('Average Response Time Comparison by System and Number of Devices', fontsize=16)
plt.xticks(index, num_devices, fontsize=16)
plt.legend(fontsize=16)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Adjusted response times for each system (in milliseconds) for varying transactions

# TIBDA response times
tibda_response_time_125 = [230, 250, 270, 290, 310, 330, 350, 370, 390, 410]
tibda_response_time_250 = [240, 260, 280, 300, 320, 340, 360, 380, 400, 420]
tibda_response_time_375 = [250, 270, 290, 310, 330, 350, 370, 390, 410, 430]
tibda_response_time_500 = [260, 280, 300, 320, 340, 360, 380, 400, 420, 440]

# Response times for other systems
sas_cloud_response_time_125 = [270, 290, 310, 330, 350, 370, 390, 410, 430, 450]
sas_cloud_response_time_250 = [260, 280, 300, 320, 340, 360, 380, 400, 420, 440]
sas_cloud_response_time_375 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
sas_cloud_response_time_500 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]

shcef_response_time_125 = [270, 290, 310, 330, 350, 370, 390, 410, 430, 450]
shcef_response_time_250 = [275, 395, 315, 335, 355, 375, 495, 415, 435, 455]
shcef_response_time_375 = [290, 310, 330, 350, 370, 390, 410, 430, 450, 470]
shcef_response_time_500 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]

ailbsm_response_time_125 = [275, 295, 315, 335, 355, 375, 395, 415, 435, 455]
ailbsm_response_time_250 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
ailbsm_response_time_375 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]
ailbsm_response_time_500 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]

mhe_is_cpm_response_time_125 = [280, 300, 320, 340, 360, 380, 400, 420, 440, 460]
mhe_is_cpm_response_time_250 = [290, 310, 330, 350, 370, 390, 410, 430, 450, 470]
mhe_is_cpm_response_time_375 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]
mhe_is_cpm_response_time_500 = [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]

pa_response_time_125 = [285, 305, 325, 345, 365, 385, 405, 425, 445, 465]
pa_response_time_250 = [295, 315, 335, 355, 375, 395, 415, 435, 455, 475]
pa_response_time_375 = [305, 325, 345, 365, 385, 405, 425, 445, 465, 485]
pa_response_time_500 = [315, 335, 355, 375, 395, 415, 435, 455, 475, 495]

# Average response times for TIBDA and other systems for different numbers of users
avg_tibda_response_time = [
    np.mean(tibda_response_time_125),
    np.mean(tibda_response_time_250),
    np.mean(tibda_response_time_375),
    np.mean(tibda_response_time_500)
]

avg_sas_cloud_response_time = [
    np.mean(sas_cloud_response_time_125),
    np.mean(sas_cloud_response_time_250),
    np.mean(sas_cloud_response_time_375),
    np.mean(sas_cloud_response_time_500)
]

avg_shcef_response_time = [
    np.mean(shcef_response_time_125),
    np.mean(shcef_response_time_250),
    np.mean(shcef_response_time_375),
    np.mean(shcef_response_time_500)
]

avg_ailbsm_response_time = [
    np.mean(ailbsm_response_time_125),
    np.mean(ailbsm_response_time_250),
    np.mean(ailbsm_response_time_375),
    np.mean(ailbsm_response_time_500)
]

avg_mhe_is_cpm_response_time = [
    np.mean(mhe_is_cpm_response_time_125),
    np.mean(mhe_is_cpm_response_time_250),
    np.mean(mhe_is_cpm_response_time_375),
    np.mean(mhe_is_cpm_response_time_500)
]

avg_pa_response_time = [
    np.mean(pa_response_time_125),
    np.mean(pa_response_time_250),
    np.mean(pa_response_time_375),
    np.mean(pa_response_time_500)
]

# Colors for each model
colors = ['#1f77b4', '#000000', '#FFA500', '#808080', '#9467bd', '#8c564b']

# Plotting
num_transactions = ['125 Transactions', '250 Transactions', '375 Transactions', '500 Transactions']
bar_width = 0.15
index = np.arange(len(num_transactions))

plt.figure(figsize=(12, 8))

plt.bar(index - bar_width*2, avg_tibda_response_time, bar_width, label='TIBDA', color=colors[0])
plt.bar(index - bar_width, avg_sas_cloud_response_time, bar_width, label='SAS-Cloud', color=colors[1])
plt.bar(index, avg_shcef_response_time, bar_width, label='SHCEF', color=colors[2])
plt.bar(index + bar_width, avg_ailbsm_response_time, bar_width, label='AILBSM', color=colors[3])
plt.bar(index + bar_width*2, avg_mhe_is_cpm_response_time, bar_width, label='MHE-IS-CPM', color=colors[4])
plt.bar(index + bar_width*3, avg_pa_response_time, bar_width, label='PA', color=colors[5])

plt.xlabel('Number of Transactions',fontsize=16)
plt.ylabel('Average Response Time (ms)',fontsize=16)
plt.title('Average Response Time Comparison by System and Number of Transactions',fontsize=16)
plt.xticks(index, num_transactions,fontsize=16)
plt.legend(fontsize=16)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Define vulnerability rates and degree of protection for each model at varying user levels
vulnerability_rates = [25, 50, 75, 100]  # Varying user levels
degree_of_protection = {
    'TIBDA': [0.95, 0.96, 0.95, 0.95],
    'SAS-Cloud': [0.871, 0.884, 0.892, 0.892],
    'SHCEF': [0.865, 0.843, 0.801, 0.801],
    'AILBSM': [0.858, 0.821, 0.822, 0.822],
    'MHE-IS-CPM': [0.861, 0.782, 0.834, 0.834],
    'PA': [0.92, 0.89, 0.86, 0.85]
}

# Define line styles and markers for each model
styles = {
    'TIBDA': {'linestyle': '-', 'marker': 'o'},
    'SAS-Cloud': {'linestyle': '--', 'marker': 's'},
    'SHCEF': {'linestyle': '-.', 'marker': 'D'},
    'AILBSM': {'linestyle': ':', 'marker': 'v'},
    'MHE-IS-CPM': {'linestyle': '--', 'marker': '^'},
    'PA': {'linestyle': '-', 'marker': 'x'}
}

# Colorblind-friendly colors from ColorBrewer
colors = ['#0072B2', '#D55E00', '#009E73', '#F0E442', '#56B4E9', '#CC79A7']

# Plotting
plt.figure(figsize=(12, 8))

for i, (model, protection_values) in enumerate(degree_of_protection.items()):
    plt.plot(vulnerability_rates, protection_values, label=model,
             color=colors[i],
             linestyle=styles[model]['linestyle'],
             marker=styles[model]['marker'],
             linewidth=2.5, markersize=8)

    # Adding annotations at the end of each line
    plt.text(vulnerability_rates[-1] + 2, protection_values[-1], model, fontsize=12, fontweight='bold',
             color=colors[i], ha='left', va='center')

plt.xlabel('Vulnerability Rate (Users)', fontsize=16, fontweight='bold')
plt.ylabel('Degree of Protection (AUC)', fontsize=16, fontweight='bold')
plt.title('Comparison of Models by AUC at Varying User Levels', fontsize=18, fontweight='bold')
plt.xticks(vulnerability_rates, fontsize=14, fontweight='bold')
plt.yticks(fontsize=14, fontweight='bold')
plt.legend(fontsize=14, loc='center right', bbox_to_anchor=(-0.25, 0.5))
plt.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)
plt.tight_layout(rect=[0, 0, 0.85, 1])
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample data for percentage of total system uptime and downtime for different approaches
approaches = ['TIBDA', 'SAS-Cloud', 'SHCEF', 'AILBSM', 'MHE-IS-CPM', 'PA']
num_values = 20  # Number of values for each approach

# Generate random uptime and downtime percentages for each approach
uptime_percentages = np.zeros((len(approaches), num_values))
downtime_percentages = np.random.randint(0, 100, size=(len(approaches), num_values))


tibda_uptime_high = np.random.randint(97, 100, size=(1, num_values // 2))
uptime_percentages[0, :num_values // 2] = tibda_uptime_high
uptime_percentages[0, num_values // 2:] = np.random.randint(80, 96, size=(1, num_values // 2))

# Generate uptime percentages for other approaches
for i in range(1, len(approaches)):
    uptime_percentages[i] = np.random.randint(80, 100, size=num_values)

# Set color for each approach
approach_colors = ['blue', 'red', 'green', 'purple', 'brown', 'pink']

# Plotting
plt.figure(figsize=(10, 6))

# Plotting uptime and downtime for each approach
for i, approach in enumerate(approaches):
    plt.scatter(uptime_percentages[i], downtime_percentages[i], color=approach_colors[i], alpha=0.7, s=50)

# Set labels and title
plt.xlabel('Percentage of Uptime', fontsize=12)
plt.ylabel('Percentage of Downtime', fontsize=12)
plt.title('Uptime vs Downtime for Different Approaches', fontsize=14)

# Add legend
plt.legend(approaches, fontsize=10,)

# Add grid
plt.grid(True, linestyle='--', alpha=0.5)

# Show plot
plt.tight_layout()
plt.show()